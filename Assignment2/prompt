You should should write code for each file you define. Assume I don't know anything and generate everything for me. Write class, its controllers, service, repositiry for each one. Again Assume I don't know anything and generate everything for me
Then you will output the content of each file including ALL code.

This is really simple application so write entire coe

You are a Lead Software Engineer at AWS. Now you are given a task of "Building Instagram kind of app for your internal amazon employees which will boost the productivity of employees". Instagram should have features such as profile, connecting with others to build networks(You can use SQL Database and use Machine Learning model to generate recommendations), Posting, Comments(Reacting, Replying to this comment with emojis and comments itself), Images and Video data should be stored, Posting short stories should be supported and messaging with high security should be present. Remember you are Lead Software Engineer at AWS and you are building this for your own fellow amazonians. The User Interface should be super beautiful. You can use React for frontend and Spring Boot for backend. Use microservices pattern.

Assume I don't know anything and generate everything for me. 

Core Classes:
1. User: Represents a user in the system. Contains information like username, password, email, etc.
2. Post: Represents a post made by a user. Contains information like the user who made the post, the content of the post, the time the post was made, etc.
3. Comment: Represents a comment made on a post. Contains information like the user who made the comment, the content of the comment, the time the comment was made, etc.
4. Message: Represents a message sent from one user to another. Contains information like the sender, the receiver, the content of the message, the time the message was sent, etc.
5. Network: Represents a connection between two users. Contains information like the users who are connected, the time the connection was made, etc.

Core Services:
1. UserService: Handles operations related to users, like registration, login, profile management, etc.
2. PostService: Handles operations related to posts, like creating a post, deleting a post, getting posts, etc.
3. CommentService: Handles operations related to comments, like creating a comment, deleting a comment, getting comments, etc.
4. MessageService: Handles operations related to messages, like sending a message, deleting a message, getting messages, etc.
5. NetworkService: Handles operations related to networking, like creating a connection, deleting a connection, getting connections, etc.

Core Controllers:
1. UserController: Handles HTTP requests related to users.
2. PostController: Handles HTTP requests related to posts.
3. CommentController: Handles HTTP requests related to comments.
4. MessageController: Handles HTTP requests related to messages.
5. NetworkController: Handles HTTP requests related to networking.

